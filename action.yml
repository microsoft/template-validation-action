name: 'Gallery Standard Validation'
description: 'Validate the standard of the gallery'
inputs:
  workingDirectory:
    description: 'The path of target template to validate'
    required: true
    default: '.'
  validatePaths:
    description: 'Comma-separated list of paths to validate'
    required: false
  topics:
    description: 'Comma-separated list of topics to check'
    required: false
  validateAzd:
    description: 'Run azd up and azd down for validation'
    required: true
    default: 'true'
  useDevContainer:
    description: 'Use dev container for validation'
    required: true
    default: 'true'
  securityAction:
    description: 'Run security action validation'
    required: true
    default: 'PSRule'
    options:
      - 'PSRule'
  validateTests:
    description: 'Run tests for validation'
    required: false
    default: 'Playwright'
    options:
      - 'Playwright'
outputs:
  resultFile:
    description: "A file path to a results file."
    value: ${{ steps.set_output.outputs.resultFile }}
runs:
  using: "composite"
  steps:
    - name: Check for .devcontainer config
      id: check_devcontainer
      if : ${{ inputs.useDevContainer == 'true' }}
      run: |
        if [ ! -f "${{ inputs.workingDirectory }}/.devcontainer/devcontainer.json" ]; then
          echo "Error: devcontainer config does not exist but useDevContainer is set to true."
          exit 1
        fi
      shell: bash
    
    - name: Check for environment variables
      id: check_env
      run: |
        if [ -z "${{ env.AZURE_CLIENT_ID }}" ]; then
          echo "Error: AZURE_CLIENT_ID is not set. Please run azd pipeline config for setup."
          exit 1
        fi
        if [ -z "${{ env.AZURE_TENANT_ID }}" ]; then
          echo "Error: AZURE_TENANT_ID is not set. Please run azd pipeline config for setup."
          exit 1
        fi
        if [ -z "${{ env.AZURE_SUBSCRIPTION_ID }}" ]; then
          echo "Error: AZURE_SUBSCRIPTION_ID is not set. Please run azd pipeline config for setup."
          exit 1
        fi
      shell: bash
        
    - name: Extract topics
      id: extract_repo_info
      if: ${{ inputs.topics != '""' }}
      run: |
        repository_name=${{ env.REPOSITORY_NAME || github.repository }}
        topics_list=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/$repository_name/topics | jq -r '.names | join(",")')
        echo "TOPICS=\"$topics_list\"" >> $GITHUB_ENV
      shell: bash
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Reform path for compatability
      id: reform_path
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          working_directory=$(cygpath $(echo "${{ inputs.workingDirectory }}" | tr '\\' '/'))
          action_path=$(cygpath $(echo "${{ github.action_path }}" | tr '\\' '/'))
          workspace=$(cygpath $(echo "$GITHUB_WORKSPACE" | tr '\\' '/'))
          echo "workingDirectory=$working_directory" >> $GITHUB_OUTPUT
          echo "actionPath=$action_path" >> $GITHUB_OUTPUT
          echo "workspace=$workspace" >> $GITHUB_OUTPUT
        else
          echo "workingDirectory=${{ inputs.workingDirectory }}" >> $GITHUB_OUTPUT
          echo "actionPath=${{ github.action_path }}" >> $GITHUB_OUTPUT
          echo "workspace=$GITHUB_WORKSPACE" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Calculate relative paths for PSRule
      if: ${{ inputs.securityAction == 'PSRule' }}
      id: calculate_relative_paths
      run: |
        relative_working_directory=$(realpath --relative-to=${{ steps.reform_path.outputs.workspace }} ${{ steps.reform_path.outputs.workingDirectory }})
        if [[ $relative_working_directory == ..* ]]; then
          rm -rf ${{ github.run_id }}/template
          mkdir -p ${{ github.run_id }}/template
          cp -a ${{ steps.reform_path.outputs.workingDirectory }}/. ${{ github.run_id }}/template
          echo "relative_working_directory=${{ github.run_id }}/template" >> $GITHUB_ENV
        else
          echo "relative_working_directory=$relative_working_directory" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Prepare PSRule for Azure
      if: ${{ inputs.securityAction == 'PSRule' }}
      id: prepare_psrule
      run: |
        rm -rf ${{ env.relative_working_directory }}/.ps-rule
        mkdir -p ${{ env.relative_working_directory }}/.ps-rule
        cp ${{ steps.reform_path.outputs.actionPath }}/.ps-rule/templateCustom.Rule.yaml ${{ env.relative_working_directory }}/.ps-rule/templateCustom.Rule.yaml
        cp ${{ steps.reform_path.outputs.actionPath}}/ps-rule.yaml ${{ env.relative_working_directory }}
        cd ${{ env.relative_working_directory }}
        python3 ${{ steps.reform_path.outputs.actionPath }}/scripts/generate-bicep-test.py 
      shell: bash

    # Analyze templates for MI compliance with PSRule for Azure
    - name: Analyze templates for MI compliance
      uses: microsoft/ps-rule@v2.9.0
      if: ${{ inputs.securityAction == 'PSRule' && env.relative_working_directory != '.' }}
      with:
        path: ${{ env.relative_working_directory }}
        modules: 'PSRule.Rules.Azure'
        baseline: 'TemplateValidation.MI_2024_10'
        outputFormat: "json"
        outputPath: 'psrule-output.json'
        summary: false
      continue-on-error: true

    # Analyze templates for MI compliance with PSRule for Azure
    - name: Analyze templates for MI compliance
      uses: microsoft/ps-rule@v2.9.0
      if: ${{ inputs.securityAction == 'PSRule' && env.relative_working_directory == '.' }}
      with:
        modules: 'PSRule.Rules.Azure'
        baseline: 'TemplateValidation.MI_2024_10'
        outputFormat: "json"
        outputPath: 'psrule-output.json'
        summary: false
      continue-on-error: true

    - name: Copy back psrule-output
      if: ${{ inputs.securityAction == 'PSRule' && steps.reform_path.outputs.workingDirectory != env.relative_working_directory }}
      id: copy-back-psrule-output
      run: |
        cp ${{ env.relative_working_directory }}/psrule-output.json ${{ steps.reform_path.outputs.workingDirectory}}
      shell: bash
      continue-on-error: true

    # - name: Set environment name with timestamp
    #  id: set_env_name
    #  if: ${{ inputs.validateAzd == 'true' }}
    #  run: |
    #    current_time=$(date +%m%d%H%M)
    #    azure_env_name="${{ env.AZURE_ENV_NAME }}-$current_time"
    #   echo "AZURE_ENV_NAME=$azure_env_name" >> $GITHUB_ENV
    #    echo "azure_env_name is $azure_env_name"
    #  shell: bash
    #  env:
    #    AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}

    - name: Check and Set targetScope in main.bicep
      id: check_targetScope
      if: ${{ inputs.validateAzd == 'true' }}
      run: |
        if [ -f "${{ steps.reform_path.outputs.workingDirectory }}/infra/main.bicep" ]; then
          # Check if targetScope is set to 'subscription' or 'resourceGroup'. The sample sentence in bicep is: targetScope = 'subscription'
          targetScope=$(grep -oP "targetScope\s*=\s*['\"]\K[^'\"]+" ${{ steps.reform_path.outputs.workingDirectory }}/infra/main.bicep)
          echo "targetScope=$targetScope" >> $GITHUB_ENV
          if [ "$targetScope" == "subscription" ]; then
            echo "targetScope is set to 'subscription' in main.bicep"
            # Add the targetScope to the env variables
          elif [ "$targetScope" == "resourceGroup" ]; then
            echo "targetScope is set to 'resourceGroup' in main.bicep"
          else
            echo "targetScope is not set to 'subscription' or 'resourceGroup' in main.bicep"
          fi
        fi
      shell: bash

    - name: Set azure resource group name in env
      id: set_resource_group
      if: ${{ inputs.validateAzd == 'true' && env.targetScope == 'resourceGroup' }}
      run: |
        azure_resource_group="rg-${{ env.AZURE_ENV_NAME }}"
        echo "AZURE_RESOURCE_GROUP=$azure_resource_group" >> $GITHUB_ENV
        echo "AZURE_RESOURCE_GROUP is $azure_resource_group"
      shell: bash
      env:
        AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}

    - name: Azure login
      uses: azure/login@v2
      if : ${{ inputs.validateAzd == 'true' && env.targetScope == 'resourceGroup' }}
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Azure CLI script
      id: create_resource_group
      if : ${{ inputs.validateAzd == 'true' && env.targetScope == 'resourceGroup' }}
      run: |
        az group create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --location ${{ env.AZURE_LOCATION }}
      shell: bash

    - name: Copy validator into devcontainer
      if: ${{ inputs.useDevContainer == 'true' }}
      run: |
        mkdir -p ${{ steps.reform_path.outputs.workingDirectory }}/tva_${{ github.run_id }}
        cp -r ${{ steps.reform_path.outputs.actionPath }}/src ${{ steps.reform_path.outputs.workingDirectory }}/tva_${{ github.run_id }}/src
        cp ${{ steps.reform_path.outputs.actionPath }}/requirements.txt ${{ steps.reform_path.outputs.workingDirectory }}/tva_${{ github.run_id }}/requirements.txt
        if [ -f "${{ steps.reform_path.outputs.workingDirectory }}/psrule-output.json" ]; then
          cp ${{ steps.reform_path.outputs.workingDirectory }}/psrule-output.json ${{ inputs.workingDirectory }}/tva_${{ github.run_id }};
        fi
        env > ${{ steps.reform_path.outputs.workingDirectory }}/tva_${{ github.run_id }}/env_variables.txt
      shell: bash

    - uses: actions/github-script@v6
      id: script
      if: ${{ inputs.useDevContainer == 'true' && inputs.validateAzd == 'true' }}
      with:
        debug: true
        script: |
          const token = process.env['ACTIONS_RUNTIME_TOKEN']
          const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']
          const aadToken = await core.getIDToken('api://AzureADTokenExchange');
          core.setOutput('TOKEN', token.trim())
          core.setOutput('AAD_TOKEN', aadToken.trim())
          core.setOutput('ID_TOKEN_URL', runtimeUrl.trim())

    # A workaround to those template that using Docker 
    - name: Start Docker
      if: ${{ inputs.useDevContainer == 'true' && inputs.validateAzd == 'true' }}
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          if find . -type f -iname 'dockerfile' | grep -q .; then
            sudo service docker start > /dev/null
          fi
        subFolder: ${{ steps.reform_path.outputs.workingDirectory }}
      continue-on-error: true

    - name: Login azd in devcontainer
      id: azd-login
      if: ${{ inputs.useDevContainer == 'true' && inputs.validateAzd == 'true' }}
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          azd auth login --client-id "${{ env.AZURE_CLIENT_ID }}" --federated-credential-provider "github" --tenant-id "${{ env.AZURE_TENANT_ID }}"
          az login --service-principal -u "${{ env.AZURE_CLIENT_ID }}" --federated-token $AZURE_AD_TOKEN --tenant "${{ env.AZURE_TENANT_ID }}"
        subFolder: ${{ steps.reform_path.outputs.workingDirectory }}
        env: |
          ACTIONS_ID_TOKEN_REQUEST_URL=${{ steps.script.outputs.ID_TOKEN_URL }}
          ACTIONS_ID_TOKEN_REQUEST_TOKEN=${{ steps.script.outputs.TOKEN }}
          AZURE_AD_TOKEN=${{ steps.script.outputs.AAD_TOKEN }}
      continue-on-error: true
      
    - name: Setup Python in devcontainer
      id: setup-python
      if: ${{ inputs.useDevContainer == 'true' }}
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          if ! command -v python &> /dev/null; then
            echo "python not found, installing python..."
            sudo apt-get update && sudo apt-get install -y python3 python3-pip python3-venv
          fi
          python3 -m venv .venv --system-site-packages
          source .venv/bin/activate
          python3 -m pip install --upgrade pip
          python3 -m pip install jupyter --force-reinstall
          python3 -m pip install -r tva_${{ github.run_id }}/requirements.txt;
        subFolder: ${{ steps.reform_path.outputs.workingDirectory }}
    
    - name: Setup Node in devcontainer
      id: setup-node
      if: ${{ inputs.useDevContainer == 'true' && inputs.validateTests == 'Playwright' }}
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          if ! command -v node &> /dev/null; then
            echo "node not found, installing lts. node..."
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          echo "Install playwright node..."
          npm install @playwright/test
          echo "Install playwright browsers..."
          npx playwright install --with-deps
        subFolder: ${{ steps.reform_path.outputs.workingDirectory }}
    
    - name: Remove spaces from inputs
      id: remove_spaces
      run: |
        inputs_validatePaths="${{ inputs.validatePaths }}"
        inputs_topics="${{ inputs.topics }}"
        inputs_validatePaths=$(echo "$inputs_validatePaths" | sed 's/ //g')
        inputs_topics=$(echo "$inputs_topics" | sed 's/ //g')
        echo "validatePaths=$inputs_validatePaths" >> $GITHUB_ENV
        echo "expected_topics=$inputs_topics" >> $GITHUB_ENV
      shell: bash

    - name: Prepare arguments
      id: prepare_arguments
      run: |
        arguments='--topics ${{ env.TOPICS }}'
        if [ -n "${{ env.expected_topics }}" ]; then
          arguments+=" --expected_topics ${{ env.expected_topics }}"
        fi
        if [ "${{ inputs.validateAzd }}" = "true" ]; then
          arguments+=" --validate_azd" 
        fi
        if [ -n "${{ env.validatePaths }}" ]; then
          arguments+=" --validate_paths ${{ env.validatePaths }}"
        fi
        if [ ${{ inputs.securityAction }} == "PSRule" ]; then
          arguments+=" --psrule_result ./psrule-output.json"
        fi
        if [ ${{ inputs.validateTests }} == "Playwright" ]; then
          arguments+=" --validate_playwright_test"
        fi
        echo "arguments=$arguments" >> $GITHUB_OUTPUT
      shell: bash

    - name: Run validation
      id: validation
      if: ${{ inputs.useDevContainer == 'true' }}
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          source .venv/bin/activate
          if [ -f tva_${{ github.run_id }}/env_variables.txt ]; then
            while IFS= read -r line; do
              var_name=$(echo "$line" | cut -d'=' -f1)
              if [ -z "${!var_name}" ]; then
                export "$line"
              fi
            done < tva_${{ github.run_id }}/env_variables.txt
          fi
          python3 tva_${{ github.run_id }}/src/gallery_validate.py . --output tva_${{ github.run_id }}/output.log ${{ steps.prepare_arguments.outputs.arguments }}
        subFolder: ${{ inputs.workingDirectory }}
        env: |
          ACTIONS_ID_TOKEN_REQUEST_URL=${{ steps.script.outputs.ID_TOKEN_URL }}
          ACTIONS_ID_TOKEN_REQUEST_TOKEN=${{ steps.script.outputs.TOKEN }}
          CREATE_ROLE_FOR_USER=false
          AZURE_PRINCIPAL_TYPE=ServicePrincipal
          FORCE_TERRAFORM_REMOTE_STATE_CREATION=false

    - name: Send output to main workflow
      id: send_output
      if: ${{ inputs.useDevContainer == 'true' }}
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          cat tva_${{ github.run_id }}/output.log
        subFolder: ${{ steps.reform_path.outputs.workingDirectory }}

    - name: Install AZD
      if: ${{ inputs.useDevContainer == 'false' }}
      uses: Azure/setup-azd@v2

    - uses: actions/setup-node@v4
      if: ${{ inputs.useDevContainer == 'false' && inputs.validateTests == 'Playwright' }}
      with:
        node-version: lts/*
    
    - name: Install playwright
      if: ${{ inputs.useDevContainer == 'false' && inputs.validateTests == 'Playwright' }}
      working-directory: ${{ inputs.workingDirectory }}
      run: |
        echo "Install playwright node..."
        npm install @playwright/test
        echo "Install playwright browsers..."
        npx playwright install --with-deps
      shell: bash

    - name: Log in with Azure (Federated Credentials)
      if: ${{ inputs.validateAzd == 'true' && inputs.useDevContainer == 'false' }}
      run: |
        azd auth login --client-id "${{ env.AZURE_CLIENT_ID }}" --federated-credential-provider "github" --tenant-id "${{ env.AZURE_TENANT_ID }}"
      shell: bash
      env:
        AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}

    - name: Run validation
      id: run_validation
      if: ${{ inputs.useDevContainer == 'false' }}
      working-directory: ${{ inputs.workingDirectory }}
      run: |
        pip install -r ${{ steps.reform_path.outputs.actionPath }}/requirements.txt
        python3 ${{ steps.reform_path.outputs.actionPath }}/src/gallery_validate.py . --output ${{ github.run_id }}-output.log ${{ steps.prepare_arguments.outputs.arguments }}
      shell: bash
      env:
        CREATE_ROLE_FOR_USER: false
        AZURE_PRINCIPAL_TYPE: "ServicePrincipal"

    - id: set_output
      run: |
        if [[ ${{ inputs.useDevContainer }} == 'true' ]]; then
          echo "${{ steps.send_output.outputs.runCmdOutput }}" >> ${{ github.run_id }}-output.log
        fi
        output_link=$(realpath ${{ github.run_id }}-output.log)
        echo "resultFile is $output_link"
        echo "resultFile=$output_link" >> $GITHUB_OUTPUT
      working-directory: ${{ inputs.workingDirectory }}
      shell: bash 

    - name: Write to workflow job summary
      run: |
        SUMMARY=$(cat ${{ steps.set_output.outputs.resultFile }})
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      shell: bash
      continue-on-error: true
